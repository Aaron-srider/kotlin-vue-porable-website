openapi: 3.0.0
info:
  title: User Management API
  description: API for managing user records
  version: 1.0.0
  contact:
    name: Your Name
    email: your.email@example.com
servers:
  - url: http://localhost:8080/api
    description: Local Development Server
paths:
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}/records:
    get:
      summary: Get records for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordDto'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'

  /users/{userId}/records/{recordId}:
    delete:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: recordId
          in: path
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
    put:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: recordId
          in: path
          required: true
          schema:
            type: integer

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordDto'


      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string

    Record:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer

        amount:
          type: integer
        ctime:
          type: string
        utime:
          type: string

    RecordDto:
      type: object
      properties:
        amount:
          type: integer

